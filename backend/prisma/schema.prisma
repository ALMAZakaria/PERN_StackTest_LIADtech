// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
 provider = "postgresql"
url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  firstName String
  lastName  String
  role      String   @default("USER") // USER, ADMIN, FREELANCER, COMPANY
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  orders           Order[]
  freelanceProfile FreelanceProfile?
  companyProfile   CompanyProfile?

  @@map("users")
}

model Product {
  id          String   @id @default(cuid())
  name        String
  description String?
  price       Float    // Using Float instead of Decimal for SQLite
  stock       Int      @default(0)
  imageUrl    String?
  category    String
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  orderItems OrderItem[]

  @@map("products")
}

model Order {
  id          String   @id @default(cuid())
  userId      String
  status      String   @default("PENDING") // PENDING, PROCESSING, SHIPPED, DELIVERED, CANCELLED
  totalAmount Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  orderItems OrderItem[]

  @@map("orders")
}

model OrderItem {
  id        String @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  price     Float

  // Relations
  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([orderId, productId])
  @@map("order_items")
}

// SkillBridge Pro Models

model FreelanceProfile {
  id           String   @id @default(cuid())
  userId       String   @unique
  bio          String?
  skills       String   // JSON string of skills: '["React", "Node.js", "TypeScript"]'
  dailyRate    Float
  availability Int      // hours per week
  location     String?
  experience   Int      // years of experience
  portfolio    PortfolioProject[]
  applications Application[]
  ratings      Rating[] @relation("FreelanceRatings")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("freelance_profiles")
}

model CompanyProfile {
  id          String   @id @default(cuid())
  userId      String   @unique
  companyName String
  industry    String
  size        String   @default("STARTUP") // STARTUP, SMALL, MEDIUM, LARGE, ENTERPRISE
  description String?
  website     String?
  location    String?
  missions    Mission[]
  ratings     Rating[] @relation("CompanyRatings")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("company_profiles")
}

model PortfolioProject {
  id                 String   @id @default(cuid())
  freelanceProfileId String
  title              String
  description        String
  technologies       String   // JSON string: '["React", "Node.js", "MongoDB"]'
  projectUrl         String?
  githubUrl          String?
  imageUrl           String?
  startDate          DateTime?
  endDate            DateTime?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  // Relations
  freelanceProfile FreelanceProfile @relation(fields: [freelanceProfileId], references: [id], onDelete: Cascade)

  @@map("portfolio_projects")
}

model Mission {
  id               String   @id @default(cuid())
  companyProfileId String
  title            String
  description      String
  requiredSkills   String   // JSON string: '["React", "Node.js", "TypeScript"]'
  budget           Float
  duration         Int      // duration in weeks
  location         String?  // "Remote", "Paris", "Hybrid"
  urgency          String   @default("NORMAL") // LOW, NORMAL, HIGH, URGENT
  status           String   @default("OPEN") // OPEN, IN_PROGRESS, COMPLETED, CANCELLED, PAUSED
  applications     Application[]
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  deadline         DateTime? // application deadline

  // Relations
  company CompanyProfile @relation(fields: [companyProfileId], references: [id], onDelete: Cascade)

  @@map("missions")
}

model Application {
  id                 String   @id @default(cuid())
  missionId          String
  freelanceProfileId String
  coverLetter        String
  proposedRate       Float
  estimatedDuration  Int      // in weeks
  status             String   @default("PENDING") // PENDING, REVIEWED, ACCEPTED, REJECTED, WITHDRAWN
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  // Relations
  mission          Mission          @relation(fields: [missionId], references: [id], onDelete: Cascade)
  freelanceProfile FreelanceProfile @relation(fields: [freelanceProfileId], references: [id], onDelete: Cascade)

  @@unique([missionId, freelanceProfileId])
  @@map("applications")
}

model Rating {
  id                 String   @id @default(cuid())
  missionId          String?  // Optional: link to specific mission
  fromFreelancerId   String?  // Rating from freelancer to company
  fromCompanyId      String?  // Rating from company to freelancer
  toFreelancerId     String?  // Rating to freelancer
  toCompanyId        String?  // Rating to company
  rating             Int      // 1-5 stars
  comment            String?
  createdAt          DateTime @default(now())

  // Relations
  fromFreelancer FreelanceProfile? @relation("FreelanceRatings", fields: [fromFreelancerId], references: [id], onDelete: Cascade)
  fromCompany    CompanyProfile?   @relation("CompanyRatings", fields: [fromCompanyId], references: [id], onDelete: Cascade)

  @@map("ratings")
}


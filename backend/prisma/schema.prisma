// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Existing models - keeping them intact
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  firstName String
  lastName  String
  role      Role     @default(USER)
  userType  UserType @default(FREELANCER) // New field for SkillBridge
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  orders Order[]
  
  // SkillBridge relations
  freelanceProfile FreelanceProfile?
  companyProfile   CompanyProfile?
  sentApplications     Application[] @relation("FreelancerApplications")
  receivedApplications Application[] @relation("CompanyApplications")
  sentRatings     Rating[] @relation("FreelancerRatings")
  receivedRatings Rating[] @relation("CompanyRatings")

  @@map("users")
}

model Product {
  id          String   @id @default(cuid())
  name        String
  description String?
  price       Decimal  @db.Decimal(10, 2)
  stock       Int      @default(0)
  imageUrl    String?
  category    String
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  orderItems OrderItem[]

  @@map("products")
}

model Order {
  id          String      @id @default(cuid())
  userId      String
  status      OrderStatus @default(PENDING)
  totalAmount Decimal     @db.Decimal(10, 2)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relations
  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  orderItems OrderItem[]

  @@map("orders")
}

model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  price     Decimal @db.Decimal(10, 2)

  // Relations
  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([orderId, productId])
  @@map("order_items")
}

// ===== SKILLBRIDGE PRO MODELS =====

model FreelanceProfile {
  id          String   @id @default(cuid())
  userId      String   @unique
  bio         String?
  skills      String[] // Array of skill strings
  dailyRate   Decimal  @db.Decimal(8, 2)
  availability Int     // Hours per week
  location    String?
  experience  Int      // Years of experience
  isVerified  Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  portfolio    PortfolioProject[]

  @@map("freelance_profiles")
}

model CompanyProfile {
  id          String   @id @default(cuid())
  userId      String   @unique
  companyName String
  industry    String
  size        CompanySize
  description String?
  website     String?
  location    String?
  isVerified  Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  missions     Mission[]

  @@map("company_profiles")
}

model Mission {
  id            String        @id @default(cuid())
  title         String
  description   String
  requiredSkills String[]     // Array of skill strings
  budget        Decimal       @db.Decimal(10, 2)
  duration      Int           // Weeks
  location      String?
  isRemote      Boolean       @default(true)
  status        MissionStatus @default(OPEN)
  companyId     String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  // Relations
  company      CompanyProfile @relation(fields: [companyId], references: [id], onDelete: Cascade)
  applications Application[]

  @@map("missions")
}

model Application {
  id          String            @id @default(cuid())
  missionId   String
  freelancerId String
  companyId   String
  proposal    String
  proposedRate Decimal          @db.Decimal(8, 2)
  status      ApplicationStatus @default(PENDING)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  // Relations
  mission     Mission          @relation(fields: [missionId], references: [id], onDelete: Cascade)
  freelancer  User             @relation("FreelancerApplications", fields: [freelancerId], references: [id], onDelete: Cascade)
  company     User             @relation("CompanyApplications", fields: [companyId], references: [id], onDelete: Cascade)
  rating      Rating?

  @@unique([missionId, freelancerId])
  @@map("applications")
}

model PortfolioProject {
  id          String   @id @default(cuid())
  title       String
  description String
  technologies String[] // Array of technology strings
  imageUrl    String?
  projectUrl  String?
  freelancerId String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  freelancer FreelanceProfile @relation(fields: [freelancerId], references: [id], onDelete: Cascade)

  @@map("portfolio_projects")
}

model Rating {
  id            String   @id @default(cuid())
  applicationId String   @unique
  rating        Int      // 1-5 stars
  comment       String?
  fromUserId    String
  toUserId      String
  createdAt     DateTime @default(now())

  // Relations
  application Application @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  fromUser    User        @relation("FreelancerRatings", fields: [fromUserId], references: [id], onDelete: Cascade)
  toUser      User        @relation("CompanyRatings", fields: [toUserId], references: [id], onDelete: Cascade)

  @@map("ratings")
}

// ===== ENUMS =====

enum Role {
  USER
  ADMIN
}

enum UserType {
  FREELANCER
  COMPANY
}

enum CompanySize {
  STARTUP
  SMALL
  MEDIUM
  LARGE
  ENTERPRISE
}

enum MissionStatus {
  OPEN
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum ApplicationStatus {
  PENDING
  ACCEPTED
  REJECTED
  WITHDRAWN
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
} 


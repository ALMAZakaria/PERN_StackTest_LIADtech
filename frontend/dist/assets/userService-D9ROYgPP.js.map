{"version":3,"file":"userService-D9ROYgPP.js","sources":["../../src/services/userService.ts"],"sourcesContent":["import api, { ApiResponse, User } from './api';\r\n\r\nexport interface CreateUserData {\r\n  firstName: string;\r\n  lastName: string;\r\n  email: string;\r\n  password: string;\r\n  role: 'user' | 'admin' | 'moderator';\r\n}\r\n\r\nexport interface UpdateUserData {\r\n  firstName?: string;\r\n  lastName?: string;\r\n  email?: string;\r\n  password?: string;\r\n  role?: string;\r\n  isActive?: boolean;\r\n}\r\n\r\nexport interface UsersQueryParams {\r\n  page?: number;\r\n  limit?: number;\r\n  search?: string;\r\n  role?: string;\r\n}\r\n\r\nexport interface UsersResponse {\r\n  users: User[];\r\n  meta: {\r\n    page: number;\r\n    limit: number;\r\n    total: number;\r\n    totalPages: number;\r\n  };\r\n}\r\n\r\nclass UserService {\r\n  // Get all users with filtering and pagination\r\n  async getUsers(params: UsersQueryParams = {}): Promise<UsersResponse> {\r\n    try {\r\n      const queryParams = new URLSearchParams();\r\n      \r\n      if (params.page) queryParams.append('page', params.page.toString());\r\n      if (params.limit) queryParams.append('limit', params.limit.toString());\r\n      if (params.search) queryParams.append('search', params.search);\r\n      if (params.role) queryParams.append('role', params.role);\r\n\r\n      const response = await api.get<ApiResponse<User[]>>(`/users?${queryParams.toString()}`);\r\n      \r\n      if (response.data.success && response.data.data) {\r\n        return {\r\n          users: response.data.data,\r\n          meta: {\r\n            page: response.data.meta?.page || params.page || 1,\r\n            limit: response.data.meta?.limit || params.limit || 20,\r\n            total: response.data.meta?.total || response.data.data.length,\r\n            totalPages: response.data.meta?.totalPages || 1\r\n          }\r\n        };\r\n      } else {\r\n        throw new Error(response.data.message || 'Failed to fetch users');\r\n      }\r\n    } catch (error: any) {\r\n      const message = error.response?.data?.message || error.message || 'Failed to fetch users';\r\n      throw new Error(message);\r\n    }\r\n  }\r\n\r\n  // Create new user (Admin only)\r\n  async createUser(userData: CreateUserData): Promise<User> {\r\n    try {\r\n      const response = await api.post<ApiResponse<User>>('/users/create', userData);\r\n      \r\n      if (response.data.success && response.data.data) {\r\n        return response.data.data;\r\n      } else {\r\n        throw new Error(response.data.message || 'Failed to create user');\r\n      }\r\n    } catch (error: any) {\r\n      // Handle validation errors with detailed messages\r\n      if (error.response?.data?.message === 'Validation failed' && error.response?.data?.data) {\r\n        const validationErrors = error.response.data.data;\r\n        const errorMessages = validationErrors.map((err: any) => `${err.field}: ${err.message}`).join(', ');\r\n        throw new Error(`Validation failed: ${errorMessages}`);\r\n      }\r\n      \r\n      const message = error.response?.data?.message || error.message || 'Failed to create user';\r\n      throw new Error(message);\r\n    }\r\n  }\r\n\r\n  // Get user by ID\r\n  async getUserById(id: string): Promise<User> {\r\n    try {\r\n      const response = await api.get<ApiResponse<User>>(`/users/${id}`);\r\n      \r\n      if (response.data.success && response.data.data) {\r\n        return response.data.data;\r\n      } else {\r\n        throw new Error(response.data.message || 'Failed to fetch user');\r\n      }\r\n    } catch (error: any) {\r\n      const message = error.response?.data?.message || error.message || 'Failed to fetch user';\r\n      throw new Error(message);\r\n    }\r\n  }\r\n\r\n  // Update user\r\n  async updateUser(id: string, userData: UpdateUserData): Promise<User> {\r\n    try {\r\n      const response = await api.put<ApiResponse<User>>(`/users/${id}`, userData);\r\n      \r\n      if (response.data.success && response.data.data) {\r\n        return response.data.data;\r\n      } else {\r\n        throw new Error(response.data.message || 'Failed to update user');\r\n      }\r\n    } catch (error: any) {\r\n      // Handle validation errors with detailed messages\r\n      if (error.response?.data?.message === 'Validation failed' && error.response?.data?.data) {\r\n        const validationErrors = error.response.data.data;\r\n        const errorMessages = validationErrors.map((err: any) => `${err.field}: ${err.message}`).join(', ');\r\n        throw new Error(`Validation failed: ${errorMessages}`);\r\n      }\r\n      \r\n      const message = error.response?.data?.message || error.message || 'Failed to update user';\r\n      throw new Error(message);\r\n    }\r\n  }\r\n\r\n  // Delete user (Admin only)\r\n  async deleteUser(id: string): Promise<void> {\r\n    try {\r\n      const response = await api.delete<ApiResponse>(`/users/${id}`);\r\n      \r\n      if (!response.data.success) {\r\n        throw new Error(response.data.message || 'Failed to delete user');\r\n      }\r\n    } catch (error: any) {\r\n      const message = error.response?.data?.message || error.message || 'Failed to delete user';\r\n      throw new Error(message);\r\n    }\r\n  }\r\n}\r\n\r\n// Export singleton instance\r\nexport const userService = new UserService();\r\nexport default userService; "],"names":["UserService","params","queryParams","response","api","error","message","userData","errorMessages","err","id","userService"],"mappings":"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"}